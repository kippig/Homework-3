##50% faster!!

#Python:
def matrix_multi(x,y):
    D = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    for z in range(4):
        for n in range(4*z, 4*(z+1)):
            for i in range(4*z, 4*(z+1)):
                D[n] += x[i]*y[4*i - 20*z + n]
    return D

timeit('matrix_multi([5.1345,6.2345,6.2345,.776454,23.6819,-246.723,42.1231341246512341,0,.0123412,9.01928374,10.294871,11.554,12.695874982,-4.63123,76.1098951,0.11111,5.6871],[5.1345,6.2345,6.2345,.776454,23.6819,-246.723,42.1231341246512341,0,.0123412,9.01928374,10.294871,11.554,12.695874982,-4.63123,76.1098951,0.11111,5.6871])')

#625 loops, best of 3: 390 µs per loop

#Cython:
%cython
def matrix_multi1(list x, list y):
    cdef int z, n, i 
    D = [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
    for z in range(4):
        for n in range(4*z, 4*(z+1)):
            for i in range(4*z, 4*(z+1)):
                D[n] += x[i]*y[4*i - 20*z + n]
    return D

timeit('matrix_multi1([5.1345,6.2345,6.2345,.776454,23.6819,-246.723,42.1231341246512341,0,.0123412,9.01928374,10.294871,11.554,12.695874982,-4.63123,76.1098951,0.11111,5.6871],[5.1345,6.2345,6.2345,.776454,23.6819,-246.723,42.1231341246512341,0,.0123412,9.01928374,10.294871,11.554,12.695874982,-4.63123,76.1098951,0.11111,5.6871])')

#625 loops, best of 3: 233 µs per loop
